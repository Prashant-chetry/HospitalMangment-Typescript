{"ast":null,"code":"var _jsxFileName = \"/home/prashant/personal/hospitalManagment/client/src/components/auth/SignUp.tsx\";\nimport React from 'react';\nimport { Formik, Form, Field } from 'formik';\nimport { Button, Grid, Paper, IconButton, TextField, InputAdornment, Typography } from '@material-ui/core';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport * as Yup from 'yup';\nimport { useHistory } from 'react-router-dom';\nconst validationSchema = Yup.object().shape({\n  email: Yup.string().email('please enter an email').required('required'),\n  password: Yup.string().required('required').min(6),\n  reTypePassword: Yup.string().required('required').min(6)\n});\n\nconst hSubmit = async function ({\n  values,\n  setSubmitting\n}) {\n  if (!Object.keys(values).length) {\n    setSubmitting(false);\n    return;\n  }\n\n  try {\n    await fetch('', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(values)\n    });\n  } catch (error) {}\n}; // eslint-disable-next-line react/prop-types\n\n\nconst SignUpForm = function ({\n  title = 'Sign Up'\n}) {\n  const history = useHistory();\n  console.log(history);\n  const initialValues = {\n    email: '',\n    password: '',\n    reTypePassword: '',\n    showPassword: false,\n    showRetypePassword: false\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Paper, {\n    style: {\n      padding: '1rem',\n      width: '100%',\n      marginTop: '2rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h3\",\n    style: {\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, title)))), /*#__PURE__*/React.createElement(Formik, {\n    initialValues: initialValues,\n    onSubmit: (values, {\n      setSubmitting\n    }) => {\n      hSubmit({\n        values,\n        setSubmitting\n      });\n    },\n    validationSchema: validationSchema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, ({\n    values,\n    setFieldValue\n  }) => /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    alignItems: \"center\",\n    justify: \"center\",\n    spacing: 3,\n    style: {\n      padding: '3rem 0'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    style: {\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Field, {\n    name: \"email\",\n    type: \"email\",\n    variant: \"outlined\",\n    label: \"Email :\",\n    required: true,\n    fullWidth: true,\n    as: TextField,\n    InputProps: {\n      startAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n        position: \"start\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(AccountCircle, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 25\n        }\n      }))\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    style: {\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Field, {\n    name: \"password\",\n    type: values.showRetypePassword ? 'text' : 'password',\n    variant: \"outlined\",\n    label: \"Password :\",\n    required: true,\n    fullWidth: true,\n    as: TextField,\n    InputProps: {\n      endAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n        position: \"end\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(IconButton, {\n        \"aria-label\": \"toggle password visibility\",\n        onClick: () => {\n          setFieldValue('showPassword', !values.showPassword);\n        },\n        edge: \"end\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 25\n        }\n      }, values.showPassword ? /*#__PURE__*/React.createElement(Visibility, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 50\n        }\n      }) : /*#__PURE__*/React.createElement(VisibilityOff, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 67\n        }\n      })))\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    style: {\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Field, {\n    name: \"reTypePassword\",\n    type: values.showRetypePassword ? 'text' : 'password',\n    variant: \"outlined\",\n    label: \"ReTypePassword :\",\n    required: true,\n    fullWidth: true,\n    as: TextField,\n    InputProps: {\n      endAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n        position: \"end\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(IconButton, {\n        \"aria-label\": \"toggle password visibility\",\n        onClick: () => {\n          setFieldValue('showRetypePassword', !values.showRetypePassword);\n        },\n        edge: \"end\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 25\n        }\n      }, values.showRetypePassword ? /*#__PURE__*/React.createElement(Visibility, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 56\n        }\n      }) : /*#__PURE__*/React.createElement(VisibilityOff, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 73\n        }\n      })))\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    style: {\n      padding: '2rem 0'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    color: \"primary\",\n    variant: \"contained\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 17\n    }\n  }, \"Submit\"))))));\n};\n\nexport default SignUpForm;","map":{"version":3,"sources":["/home/prashant/personal/hospitalManagment/client/src/components/auth/SignUp.tsx"],"names":["React","Formik","Form","Field","Button","Grid","Paper","IconButton","TextField","InputAdornment","Typography","AccountCircle","Visibility","VisibilityOff","Yup","useHistory","validationSchema","object","shape","email","string","required","password","min","reTypePassword","hSubmit","values","setSubmitting","Object","keys","length","fetch","method","headers","body","JSON","stringify","error","SignUpForm","title","history","console","log","initialValues","showPassword","showRetypePassword","padding","width","marginTop","textAlign","setFieldValue","startAdornment","endAdornment"],"mappings":"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","sourcesContent":["import React, { ReactNode } from 'react';\nimport { Formik, Form, Field } from 'formik';\nimport { Button, Grid, Paper, IconButton, TextField, InputAdornment, Typography } from '@material-ui/core';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport * as Yup from 'yup';\nimport { useHistory } from 'react-router-dom';\n\ninterface FormikValue {\n  email: string;\n  password: string;\n  reTypePassword: string;\n  showPassword: boolean;\n  showRetypePassword: boolean;\n}\nconst validationSchema = Yup.object().shape({\n  email: Yup.string().email('please enter an email').required('required'),\n  password: Yup.string().required('required').min(6),\n  reTypePassword: Yup.string().required('required').min(6),\n});\n\nconst hSubmit = async function ({\n  values,\n  setSubmitting,\n}: {\n  values: FormikValue;\n  setSubmitting: (isSubmitting: boolean) => void;\n}): Promise<void> {\n  if (!Object.keys(values).length) {\n    setSubmitting(false);\n    return;\n  }\n  try {\n    await fetch('', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(values),\n    });\n  } catch (error) {}\n};\n// eslint-disable-next-line react/prop-types\nconst SignUpForm: React.FC<{ title?: string }> = function ({ title = 'Sign Up' }) {\n  const history = useHistory();\n  console.log(history);\n  const initialValues: FormikValue = {\n    email: '',\n    password: '',\n    reTypePassword: '',\n    showPassword: false,\n    showRetypePassword: false,\n  };\n  return (\n    <>\n      <Grid container justify=\"center\">\n        <Grid item xs={12}>\n          <Paper style={{ padding: '1rem', width: '100%', marginTop: '2rem' }}>\n            <Typography variant=\"h3\" style={{ textAlign: 'center' }}>\n              {title}\n            </Typography>\n          </Paper>\n        </Grid>\n      </Grid>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={(values, { setSubmitting }): void => {\n          hSubmit({ values, setSubmitting });\n        }}\n        validationSchema={validationSchema}\n      >\n        {({ values, setFieldValue }): ReactNode => (\n          <Form>\n            <Grid\n              container\n              direction=\"column\"\n              alignItems=\"center\"\n              justify=\"center\"\n              spacing={3}\n              style={{ padding: '3rem 0' }}\n            >\n              <Grid item xs={3} style={{ width: '100%' }}>\n                <Field\n                  name=\"email\"\n                  type=\"email\"\n                  variant=\"outlined\"\n                  label=\"Email :\"\n                  required\n                  fullWidth\n                  as={TextField}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <AccountCircle />\n                      </InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n              <Grid item xs={3} style={{ width: '100%' }}>\n                <Field\n                  name=\"password\"\n                  type={values.showRetypePassword ? 'text' : 'password'}\n                  variant=\"outlined\"\n                  label=\"Password :\"\n                  required\n                  fullWidth\n                  as={TextField}\n                  InputProps={{\n                    endAdornment: (\n                      <InputAdornment position=\"end\">\n                        <IconButton\n                          aria-label=\"toggle password visibility\"\n                          onClick={() => {\n                            setFieldValue('showPassword', !values.showPassword);\n                          }}\n                          edge=\"end\"\n                        >\n                          {values.showPassword ? <Visibility /> : <VisibilityOff />}\n                        </IconButton>\n                      </InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n              <Grid item xs={3} style={{ width: '100%' }}>\n                <Field\n                  name=\"reTypePassword\"\n                  type={values.showRetypePassword ? 'text' : 'password'}\n                  variant=\"outlined\"\n                  label=\"ReTypePassword :\"\n                  required\n                  fullWidth\n                  as={TextField}\n                  InputProps={{\n                    endAdornment: (\n                      <InputAdornment position=\"end\">\n                        <IconButton\n                          aria-label=\"toggle password visibility\"\n                          onClick={(): void => {\n                            setFieldValue('showRetypePassword', !values.showRetypePassword);\n                          }}\n                          edge=\"end\"\n                        >\n                          {values.showRetypePassword ? <Visibility /> : <VisibilityOff />}\n                        </IconButton>\n                      </InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n            </Grid>\n            <Grid container justify=\"center\" style={{ padding: '2rem 0' }}>\n              <Grid item>\n                <Button type=\"submit\" color=\"primary\" variant=\"contained\">\n                  Submit\n                </Button>\n              </Grid>\n            </Grid>\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nexport default SignUpForm;\n"]},"metadata":{},"sourceType":"module"}