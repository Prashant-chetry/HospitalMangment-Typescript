{"ast":null,"code":"var _jsxFileName = \"/home/prashant/personal/hospitalManagment/client/src/components/auth/SignUp.tsx\";\n\n/* eslint-disable @typescript-eslint/interface-name-prefix */\nimport React from 'react';\nimport { Formik, Form, Field } from 'formik';\nimport { Button, Grid, Paper, IconButton, TextField, InputAdornment, Typography } from '@material-ui/core';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport * as Yup from 'yup';\nimport { useHistory } from 'react-router-dom';\nconst validationSchema = Yup.object().shape({\n  email: Yup.string().email('please enter an email').required('required'),\n  password: Yup.string().required('required').min(6),\n  reTypedPassword: Yup.string().required('required').min(6)\n});\n\nconst hSubmit = async function ({\n  values,\n  setSubmitting,\n  history\n}) {\n  if (!Object.keys(values).length) {\n    setSubmitting(false);\n    return;\n  }\n\n  try {\n    const options = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(values)\n    };\n    const url = history.location.pathname === '/signup' ? '/api/auth/signUp' : '/api/auth/logIn';\n    const resp = await fetch(`http://localhost:8080${url}`, options);\n    const body = await resp.json();\n\n    if (!body.success) {\n      switch (body.message) {\n        case 'user already exists':\n          history.push('/login');\n          break;\n\n        default:\n          break;\n      }\n    } else {\n      if (body.accessToken) window.localStorage.setItem('accessToken-HM', body.accessToken);\n    }\n\n    console.log(body);\n  } catch (error) {\n    console.log(error);\n  }\n}; // eslint-disable-next-line react/prop-types\n\n\nconst SignUpForm = function ({\n  title = 'Sign Up'\n}) {\n  const initialValues = {\n    email: '',\n    password: '',\n    reTypedPassword: '',\n    showPassword: false,\n    showRetypePassword: false\n  };\n  const history = useHistory();\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Paper, {\n    style: {\n      padding: '1rem',\n      width: '100%',\n      marginTop: '2rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h3\",\n    style: {\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, title)))), /*#__PURE__*/React.createElement(Formik, {\n    initialValues: initialValues,\n    onSubmit: (values, {\n      setSubmitting\n    }) => {\n      hSubmit({\n        values,\n        setSubmitting,\n        history\n      });\n    },\n    validationSchema: validationSchema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, ({\n    values,\n    setFieldValue\n  }) => /*#__PURE__*/React.createElement(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    alignItems: \"center\",\n    justify: \"center\",\n    spacing: 3,\n    style: {\n      padding: '3rem 0'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    style: {\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Field, {\n    name: \"email\",\n    type: \"email\",\n    variant: \"outlined\",\n    label: \"Email :\",\n    required: true,\n    fullWidth: true,\n    as: TextField,\n    InputProps: {\n      startAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n        position: \"start\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(AccountCircle, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 25\n        }\n      }))\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    style: {\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Field, {\n    name: \"password\",\n    type: values.showPassword ? 'text' : 'password',\n    variant: \"outlined\",\n    label: \"Password :\",\n    required: true,\n    fullWidth: true,\n    as: TextField,\n    InputProps: {\n      endAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n        position: \"end\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(IconButton, {\n        \"aria-label\": \"toggle password visibility\",\n        onClick: () => {\n          setFieldValue('showPassword', !values.showPassword);\n        },\n        edge: \"end\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 25\n        }\n      }, values.showPassword ? /*#__PURE__*/React.createElement(Visibility, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 50\n        }\n      }) : /*#__PURE__*/React.createElement(VisibilityOff, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 67\n        }\n      })))\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    style: {\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Field, {\n    name: \"reTypedPassword\",\n    type: values.showRetypePassword ? 'text' : 'password',\n    variant: \"outlined\",\n    label: \"ReTypePassword :\",\n    required: true,\n    fullWidth: true,\n    as: TextField,\n    InputProps: {\n      endAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n        position: \"end\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 23\n        }\n      }, /*#__PURE__*/React.createElement(IconButton, {\n        \"aria-label\": \"toggle password visibility\",\n        onClick: () => {\n          setFieldValue('showRetypePassword', !values.showRetypePassword);\n        },\n        edge: \"end\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 25\n        }\n      }, values.showRetypePassword ? /*#__PURE__*/React.createElement(Visibility, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 56\n        }\n      }) : /*#__PURE__*/React.createElement(VisibilityOff, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 73\n        }\n      })))\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    style: {\n      padding: '2rem 0'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    color: \"primary\",\n    variant: \"contained\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 17\n    }\n  }, \"Submit\"))))));\n};\n\nexport default SignUpForm;","map":{"version":3,"sources":["/home/prashant/personal/hospitalManagment/client/src/components/auth/SignUp.tsx"],"names":["React","Formik","Form","Field","Button","Grid","Paper","IconButton","TextField","InputAdornment","Typography","AccountCircle","Visibility","VisibilityOff","Yup","useHistory","validationSchema","object","shape","email","string","required","password","min","reTypedPassword","hSubmit","values","setSubmitting","history","Object","keys","length","options","method","headers","body","JSON","stringify","url","location","pathname","resp","fetch","json","success","message","push","accessToken","window","localStorage","setItem","console","log","error","SignUpForm","title","initialValues","showPassword","showRetypePassword","padding","width","marginTop","textAlign","setFieldValue","startAdornment","endAdornment"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/interface-name-prefix */\nimport React, { ReactNode } from 'react';\nimport { Formik, Form, Field } from 'formik';\nimport { Button, Grid, Paper, IconButton, TextField, InputAdornment, Typography } from '@material-ui/core';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport * as Yup from 'yup';\nimport { useHistory } from 'react-router-dom';\nimport { Location, History } from 'history';\n\ninterface FormikValue {\n  email: string;\n  password: string;\n  reTypedPassword: string;\n  showPassword: boolean;\n  showRetypePassword: boolean;\n}\nconst validationSchema = Yup.object().shape({\n  email: Yup.string().email('please enter an email').required('required'),\n  password: Yup.string().required('required').min(6),\n  reTypedPassword: Yup.string().required('required').min(6),\n});\n\ninterface IHsubmitProps {\n  values: FormikValue;\n  setSubmitting: (isSubmitting: boolean) => void;\n  history: History;\n}\nconst hSubmit = async function ({ values, setSubmitting, history }: IHsubmitProps): Promise<void> {\n  if (!Object.keys(values).length) {\n    setSubmitting(false);\n    return;\n  }\n  try {\n    const options: {\n      method: string;\n      headers: {\n        'Content-Type': string;\n      };\n      body: string;\n    } = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(values),\n    };\n    const url = history.location.pathname === '/signup' ? '/api/auth/signUp' : '/api/auth/logIn';\n    const resp = await fetch(`http://localhost:8080${url}`, options);\n    const body = await resp.json();\n    if (!body.success) {\n      switch (body.message) {\n        case 'user already exists':\n          history.push('/login');\n          break;\n        default:\n          break;\n      }\n    } else {\n      if (body.accessToken) window.localStorage.setItem('accessToken-HM', body.accessToken);\n    }\n    console.log(body);\n  } catch (error) {\n    console.log(error);\n  }\n};\n// eslint-disable-next-line react/prop-types\nconst SignUpForm: React.FC<{ title?: string }> = function ({ title = 'Sign Up' }) {\n  const initialValues: FormikValue = {\n    email: '',\n    password: '',\n    reTypedPassword: '',\n    showPassword: false,\n    showRetypePassword: false,\n  };\n  const history = useHistory();\n\n  return (\n    <>\n      <Grid container justify=\"center\">\n        <Grid item xs={12}>\n          <Paper style={{ padding: '1rem', width: '100%', marginTop: '2rem' }}>\n            <Typography variant=\"h3\" style={{ textAlign: 'center' }}>\n              {title}\n            </Typography>\n          </Paper>\n        </Grid>\n      </Grid>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={(values, { setSubmitting }): void => {\n          hSubmit({ values, setSubmitting, history });\n        }}\n        validationSchema={validationSchema}\n      >\n        {({ values, setFieldValue }): ReactNode => (\n          <Form>\n            <Grid\n              container\n              direction=\"column\"\n              alignItems=\"center\"\n              justify=\"center\"\n              spacing={3}\n              style={{ padding: '3rem 0' }}\n            >\n              <Grid item xs={3} style={{ width: '100%' }}>\n                <Field\n                  name=\"email\"\n                  type=\"email\"\n                  variant=\"outlined\"\n                  label=\"Email :\"\n                  required\n                  fullWidth\n                  as={TextField}\n                  InputProps={{\n                    startAdornment: (\n                      <InputAdornment position=\"start\">\n                        <AccountCircle />\n                      </InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n              <Grid item xs={3} style={{ width: '100%' }}>\n                <Field\n                  name=\"password\"\n                  type={values.showPassword ? 'text' : 'password'}\n                  variant=\"outlined\"\n                  label=\"Password :\"\n                  required\n                  fullWidth\n                  as={TextField}\n                  InputProps={{\n                    endAdornment: (\n                      <InputAdornment position=\"end\">\n                        <IconButton\n                          aria-label=\"toggle password visibility\"\n                          onClick={() => {\n                            setFieldValue('showPassword', !values.showPassword);\n                          }}\n                          edge=\"end\"\n                        >\n                          {values.showPassword ? <Visibility /> : <VisibilityOff />}\n                        </IconButton>\n                      </InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n              <Grid item xs={3} style={{ width: '100%' }}>\n                <Field\n                  name=\"reTypedPassword\"\n                  type={values.showRetypePassword ? 'text' : 'password'}\n                  variant=\"outlined\"\n                  label=\"ReTypePassword :\"\n                  required\n                  fullWidth\n                  as={TextField}\n                  InputProps={{\n                    endAdornment: (\n                      <InputAdornment position=\"end\">\n                        <IconButton\n                          aria-label=\"toggle password visibility\"\n                          onClick={(): void => {\n                            setFieldValue('showRetypePassword', !values.showRetypePassword);\n                          }}\n                          edge=\"end\"\n                        >\n                          {values.showRetypePassword ? <Visibility /> : <VisibilityOff />}\n                        </IconButton>\n                      </InputAdornment>\n                    ),\n                  }}\n                />\n              </Grid>\n            </Grid>\n            <Grid container justify=\"center\" style={{ padding: '2rem 0' }}>\n              <Grid item>\n                <Button type=\"submit\" color=\"primary\" variant=\"contained\">\n                  Submit\n                </Button>\n              </Grid>\n            </Grid>\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nexport default SignUpForm;\n"]},"metadata":{},"sourceType":"module"}